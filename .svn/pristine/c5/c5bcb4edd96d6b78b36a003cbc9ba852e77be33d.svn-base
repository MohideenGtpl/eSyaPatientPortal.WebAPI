using eSyaPatientPortal.DL.Entities;
using eSyaPatientPortal.DO;
using eSyaPatientPortal.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaPatientPortal.DL.Repository
{
    public class AppointmentBookingRepository: IAppointmentBookingRepository
    {
        public static int GetWeekOfMonth(DateTime date)
        {
            DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

            while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
                date = date.AddDays(1);

            return (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;
        }


        public async Task<DO_ReturnParameter> InsertIntoDoctorSlotBooking(DO_PatientAppointmentDetail obj)
        {
            using (var db = new eSyaEnterpriseContext())
            {
                try
                {
                    bool warning = false;
                    string warningMessage = "";

                    var wk = obj.AppointmentDate.Date.DayOfWeek.ToString();
                    var wk_No = GetWeekOfMonth(obj.AppointmentDate.Date);
                    var dc = await db.GtEsdos1.Where(w => w.BusinessKey == obj.BusinessKey
                                && w.DoctorId == obj.DoctorID
                                && w.DayOfWeek.ToUpper() == wk.ToUpper()
                                && ((wk_No == 1 && w.Week1) || (wk_No == 2 && w.Week2)
                                    || (wk_No == 3 && w.Week3) || (wk_No == 4 && w.Week4)
                                    || (wk_No == 5 && w.Week5) || (wk_No == 6 && w.Week5))
                                && (bool)w.ActiveStatus).FirstOrDefaultAsync();

                    if (dc != null && dc.NoOfPatients > 0)
                    {
                        var patientBooked = await db.GtEopaph.Where(w => w.BusinessKey == obj.BusinessKey
                               && w.DoctorId == obj.DoctorID
                               && w.AppointmentDate.Date == obj.AppointmentDate.Date
                               && !w.UnScheduleWorkOrder
                               && w.AppointmentStatus != "CN").CountAsync();

                        if (patientBooked >= dc.NoOfPatients)
                        {
                            warning = true;
                            warningMessage = "Patient Limit for the day is " + dc.NoOfPatients.ToString() + ".Already booked patient count is " + patientBooked;
                        }
                    }

                    var endTimeSlot = obj.AppointmentFromTime.Add(new TimeSpan(0, obj.Duration, 0));

                    var is_TimeSlotExits = await db.GtEopaph.Where(w => w.BusinessKey == obj.BusinessKey
                                && w.DoctorId == obj.DoctorID
                                && w.AppointmentDate.Date == obj.AppointmentDate.Date
                                && w.AppointmentFromTime >= obj.AppointmentFromTime
                                && w.AppointmentFromTime < endTimeSlot
                                && !w.UnScheduleWorkOrder
                                && w.AppointmentStatus != "CN").CountAsync();
                    if (is_TimeSlotExits > 0)
                    {
                        return new DO_ReturnParameter() { Warning = warning, WarningMessage = warningMessage, Success = false, Message = "The Slot has been already booked" };
                    }

                    var slotBlocked = await db.GtEopaps.Where(w => w.BusinessKey == obj.BusinessKey
                               && w.DoctorId == obj.DoctorID
                               && w.AppointmentDate.Date == obj.AppointmentDate.Date
                               && w.AppointmentFromTime >= obj.AppointmentFromTime
                               && w.AppointmentFromTime < endTimeSlot
                               && w.AppointmentStatus == "SL"
                               && w.CreatedBy != obj.UserID
                               && w.CreatedOn.AddMinutes(2) > System.DateTime.Now).CountAsync();
                    if (slotBlocked > 0)
                    {
                        return new DO_ReturnParameter() { Warning = warning, WarningMessage = warningMessage, Success = false, Message = "The Slot has been blocked." };
                    }

                    var qs_apSL = new GtEopaps
                    {
                        BusinessKey = obj.BusinessKey,
                        SpecialtyId = obj.SpecialtyID,
                        DoctorId = obj.DoctorID,
                        AppointmentDate = obj.AppointmentDate,
                        AppointmentFromTime = obj.AppointmentFromTime,
                        Duration = obj.Duration,
                        AppointmentStatus = "SL",
                        ActiveStatus = true,
                        FormId = obj.FormID,
                        CreatedBy = obj.UserID,
                        CreatedOn = System.DateTime.Now,
                        CreatedTerminal = obj.TerminalID
                    };
                    db.GtEopaps.Add(qs_apSL);
                    await db.SaveChangesAsync();

                    return new DO_ReturnParameter { Warning = warning, WarningMessage = warningMessage, Success = true };
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoPatientAppointmentDetail(DO_PatientAppointmentDetail obj)
        {
            using (var db = new eSyaEnterpriseContext())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var endTimeSlot = obj.AppointmentFromTime.Add(new TimeSpan(0, obj.Duration, 0));

                        var is_TimeSlotExits = await db.GtEopaph.Where(w => w.BusinessKey == obj.BusinessKey
                                    && w.DoctorId == obj.DoctorID
                                    && w.AppointmentDate.Date == obj.AppointmentDate.Date
                                    && w.AppointmentFromTime >= obj.AppointmentFromTime
                                    && w.AppointmentFromTime < endTimeSlot
                                    && !w.UnScheduleWorkOrder
                                    && w.AppointmentStatus != "CN").CountAsync();
                        if (is_TimeSlotExits > 0)
                        {
                            return new DO_ReturnParameter() { Success = false, Message = "The Slot has been already booked" };
                        }

                        if (obj.UHID > 0)
                        {
                            var isAlreadyBooked = await db.GtEopaph
                                .Join(db.GtEopapd,
                                    h => new { h.BusinessKey, h.AppointmentKey },
                                    d => new { d.BusinessKey, d.AppointmentKey },
                                    (h, d) => new { h, d })
                                .Where(w => w.h.BusinessKey == obj.BusinessKey
                                        && w.d.Uhid == obj.UHID
                                        && w.h.DoctorId != obj.DoctorID
                                        && w.h.AppointmentDate.Date == obj.AppointmentDate.Date
                                        && w.h.AppointmentFromTime >= obj.AppointmentFromTime
                                        && w.h.AppointmentFromTime < endTimeSlot
                                        && !w.h.UnScheduleWorkOrder
                                        && w.h.AppointmentStatus != "CN"
                                    ).CountAsync();
                            if (isAlreadyBooked > 0)
                            {
                                return new DO_ReturnParameter() { Success = false, Message = "The Same MRN is booked for different doctor for same time slot." };
                            }
                        }

                        var financialYear = db.GtEcclco.Where(w =>
                                                           System.DateTime.Now.Date >= w.FromDate.Date
                                                        && System.DateTime.Now.Date <= w.TillDate.Date)
                                            .First().FinancialYear;
                        obj.FinancialYear = (int)financialYear;

                        //var dc_ap = await db.GtHmfodc
                        //                .Where(w => w.BusinessKey == obj.BusinessKey
                        //                    && w.FinancialYear == financialYear
                        //                    && w.DocumentId == 11).FirstOrDefaultAsync();
                        //dc_ap.CurrentDocNumber = dc_ap.CurrentDocNumber + 1;

                        obj.DocumentID = 1;
                        obj.DocumentNumber = (int)db.GtEopaph.Where(W => W.BusinessKey == obj.BusinessKey && W.FinancialYear == obj.FinancialYear).Select(m => m.DocumentNumber).DefaultIfEmpty(0).Max() + 1;

                        var appointmentKey = decimal.Parse(obj.FinancialYear.ToString().Substring(2, 2) + obj.BusinessKey.ToString().PadLeft(2, '0') +
                            obj.DocumentNumber.ToString());

                        obj.AppointmentKey = appointmentKey;

                        //obj.DocumentID = 1;
                        //obj.DocumentNumber = db.GtFoaphd.Select(s => s.DocumentNumber).DefaultIfEmpty(0).Max() + 1;
                        //obj.AppointmentKey = decimal.Parse(financialYear.ToString().Substring(2, 2) + obj.DocumentNumber.ToString());

                        string appType = "CA";
                        if (obj.IsSponsored)
                            appType = "SA";

                        var rp = await GetAppointmentQueueToken(db, obj);
                        if (!rp.Success)
                            return rp;
                        var qTokenKey = obj.QueueTokenKey;

                        var qs_apTk = new GtEopapq
                        {
                            BusinessKey = obj.BusinessKey,
                            TokenDate = obj.AppointmentDate.Date,
                            QueueTokenKey = qTokenKey,
                            AppointmentFromTime = obj.AppointmentFromTime,
                            AppointmentKey = obj.AppointmentKey,
                            SequeueNumber = 1,
                            PatientType = appType,
                            SpecialtyId = obj.SpecialtyID,
                            DoctorId = obj.DoctorID,
                            Uhid = obj.UHID,
                            TokenStatus = "AP",
                            ActiveStatus = true,
                            FormId = obj.FormID,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEopapq.Add(qs_apTk);
                        await db.SaveChangesAsync();

                        var app_hd = new GtEopaph
                        {
                            BusinessKey = obj.BusinessKey,
                            FinancialYear = obj.FinancialYear,
                            DocumentId = obj.DocumentID,
                            DocumentNumber = obj.DocumentNumber,
                            AppointmentKey = obj.AppointmentKey,
                            SpecialtyId = obj.SpecialtyID,
                            DoctorId = obj.DoctorID,
                            AppointmentDate = obj.AppointmentDate,
                            AppointmentFromTime = obj.AppointmentFromTime,
                            Duration = obj.Duration,
                            AppointmentStatus = "AP",
                            ReasonforAppointment = obj.ReasonforAppointment,
                            QueueTokenKey = qTokenKey,
                            VisitType = obj.VisitType,
                            ReferredBy = obj.ReferredBy,
                            UnScheduleWorkOrder = false,
                            ActiveStatus = true,
                            FormId = obj.FormID,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEopaph.Add(app_hd);
                        await db.SaveChangesAsync();

                        var app_dt = new GtEopapd
                        {
                            BusinessKey = obj.BusinessKey,
                            AppointmentKey = obj.AppointmentKey,
                            Uhid = obj.UHID,
                            PatientFirstName = obj.PatientFirstName,
                            PatientMiddleName = obj.PatientMiddleName,
                            PatientLastName = obj.PatientLastName,
                            Gender = obj.Gender,
                            DateOfBirth = obj.DateOfBirth,
                            MobileNumber = obj.PatientMobileNumber,
                            EmailId = obj.PatientEmailID,
                            IsSponsored = obj.IsSponsored,
                            CustomerId = obj.CustomerID,
                            ActiveStatus = true,
                            FormId = obj.FormID,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEopapd.Add(app_dt);

                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter { Success = true, ID = obj.AppointmentKey, Key = qTokenKey };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> GetAppointmentQueueToken(eSyaEnterpriseContext db, DO_PatientAppointmentDetail obj)
        {
            var doctorCode = obj.DoctorID.ToString();

            string appType = "CA";
            if (obj.IsSponsored)
                appType = "SA";

            TimeSpan totalDuration = new TimeSpan();
            var appointmentSchedule = await new DoctorClinicRepository().GetDoctorScheduleByID(obj.BusinessKey, obj.DoctorID, obj.AppointmentDate);
            foreach (var s in appointmentSchedule)
            {
                if (s.FromTime <= obj.AppointmentFromTime && s.ToTime >= obj.AppointmentFromTime)
                {
                    totalDuration += obj.AppointmentFromTime.Subtract(s.FromTime);
                    break;
                }
                else
                    totalDuration += s.ToTime.Subtract(s.FromTime);
            }

            var totalIntervalinMinutes = totalDuration.Days * 24 * 60 +
                                         totalDuration.Hours * 60 +
                                         totalDuration.Minutes;
            var slotQueue = Math.Ceiling(totalIntervalinMinutes / 5.0) + 1;

            while (true)
            {
                var qTokenKey = doctorCode + "-" + slotQueue.ToString().PadLeft(2, '0');

                var q_exists = await db.GtEopapq.Where(w => w.BusinessKey == obj.BusinessKey && w.DoctorId == obj.DoctorID
                    && w.TokenDate.Date == obj.AppointmentDate.Date
                    && w.QueueTokenKey == qTokenKey
                    //&& w.QueueTokenKey.Substring(5, w.QueueTokenKey.Length - 5) == slotQueue.ToString().PadLeft(2, '0')
                    ).FirstOrDefaultAsync();
                if (q_exists != null)
                {
                    slotQueue++;
                    continue;
                }
                else
                {
                    //var qTokenKey = appType + doctorCode + slotQueue.ToString().PadLeft(2, '0');
                    obj.QueueTokenKey = qTokenKey;
                    break;
                }
            }

            return new DO_ReturnParameter
            {
                Success = true
            };
        }

        public async Task<List<DO_Doctor>> GetDoctorScheduleByBKeyDoctorDate(int businessKey, int specialtyId, int doctorId, DateTime appointmentDate)
        {

            var wk = appointmentDate.DayOfWeek.ToString();
            var wk_No = GetWeekOfMonth(appointmentDate);


            using (var db = new eSyaEnterpriseContext())
            {
                var l_ds_1 = await db.GtEsdocd
                    .GroupJoin(db.GtEsdos1.Where(w => w.BusinessKey == businessKey
                                && w.DayOfWeek.ToUpper() == wk.ToUpper()
                                //&& w.ConsultationId == consultationType
                                //&& w.ClinicId == clinicType
                                && w.SpecialtyId == specialtyId
                                && ((wk_No == 1 && w.Week1) || (wk_No == 2 && w.Week2)
                                    || (wk_No == 3 && w.Week3) || (wk_No == 4 && w.Week4)
                                    || (wk_No == 5 && w.Week5) || (wk_No == 6 && w.Week5))
                                && w.ActiveStatus),
                        d => d.DoctorId,
                        s => s.DoctorId,
                        (d, s) => new { d, s }).DefaultIfEmpty()
                    .SelectMany(d => d.s.DefaultIfEmpty(), (d, s) => new { d.d, s })
                    .GroupJoin(db.GtEsdold.Where(w =>
                                appointmentDate.Date >= w.OnLeaveFrom.Date
                                && appointmentDate.Date <= w.OnLeaveTill.Date
                                && w.ActiveStatus),
                        ds => ds.d.DoctorId,
                        l => l.DoctorId,
                        (ds, l) => new { ds, l = l.FirstOrDefault() }).DefaultIfEmpty()
                    .Where(w => w.ds.d.ActiveStatus
                                && !db.GtEsdos2.Any(r => r.BusinessKey == businessKey
                                       //&& r.ConsultationId == consultationType
                                       //&& r.ClinicId == clinicType
                                       && r.SpecialtyId == specialtyId
                                       && r.DoctorId == w.ds.d.DoctorId
                                       && r.ScheduleDate.Date == appointmentDate.Date
                                       && r.ActiveStatus))
                    .AsNoTracking()
                    .Select(x => new DO_Doctor
                    {
                        DoctorId = x.ds.d.DoctorId,
                        DoctorName = x.ds.d.DoctorName,
                        DoctorRemarks = x.ds.d.DoctorRemarks,
                        DayOfWeek = x.ds.s != null ? x.ds.s.DayOfWeek : "",
                        ScheduleDate = appointmentDate,
                        NumberofPatients = x.ds.s != null ? x.ds.s.NoOfPatients : 0,
                        FromTime = x.ds.s != null ? x.ds.s.ScheduleFromTime : new TimeSpan(9, 00, 00),
                        ToTime = x.ds.s != null ? x.ds.s.ScheduleToTime : new TimeSpan(18, 00, 00),
                        IsAvailable = x.ds.s != null ? true : false,
                        IsOnLeave = x.l != null ? x.l.ActiveStatus : false
                    }).ToListAsync();


                var l_ds_2 = await db.GtEsdocd
                   .GroupJoin(db.GtEsdos2.Where(w => w.BusinessKey == businessKey
                               //&& w.ConsultationId == consultationType
                               //&& w.ClinicId == clinicType
                               && w.SpecialtyId == specialtyId
                               && w.ScheduleDate.Date == appointmentDate.Date
                               && w.ActiveStatus),
                       d => d.DoctorId,
                       s => s.DoctorId,
                       (d, s) => new { d, s }).DefaultIfEmpty()
                   .SelectMany(d => d.s.DefaultIfEmpty(), (d, s) => new { d.d, s })
                   .GroupJoin(db.GtEsdold.Where(w =>
                               appointmentDate.Date >= w.OnLeaveFrom.Date
                               && appointmentDate.Date <= w.OnLeaveTill.Date
                               && w.ActiveStatus),
                       ds => ds.d.DoctorId,
                       l => l.DoctorId,
                       (ds, l) => new { ds, l = l.FirstOrDefault() }).DefaultIfEmpty()
                   .Where(w => w.ds.d.ActiveStatus)
                   .AsNoTracking()
                   .Select(x => new DO_Doctor
                   {
                       DoctorId = x.ds.d.DoctorId,
                       DoctorName = x.ds.d.DoctorName,
                       DoctorRemarks = x.ds.d.DoctorRemarks,
                       DayOfWeek = "",
                       ScheduleDate = appointmentDate,
                       NumberofPatients = x.ds.s != null ? x.ds.s.NoOfPatients : 0,
                       FromTime = x.ds.s != null ? x.ds.s.ScheduleFromTime : new TimeSpan(9, 00, 00),
                       ToTime = x.ds.s != null ? x.ds.s.ScheduleToTime : new TimeSpan(18, 00, 00),
                       IsAvailable = x.ds.s != null ? true : false,
                       IsOnLeave = x.l != null ? x.l.ActiveStatus : false
                   }).ToListAsync();

                var l_ds = l_ds_1.Union(l_ds_2);

                return l_ds.Where(w => w.IsAvailable).ToList();
            }
        }


        public async Task<List<DO_PatientAppointmentDetail>> GetAppointmentBookedSlotByDoctorDate(int businessKey, int specialtyId,
           int doctorId, DateTime scheduleDate)
        {
            try
            {
                using (var db = new eSyaEnterpriseContext())
                {
                    var ds = await db.GtEopaph
                        .Where(w => w.BusinessKey == businessKey && w.SpecialtyId == specialtyId
                                    && w.DoctorId == doctorId
                                    && w.AppointmentDate.Date == scheduleDate.Date
                                    && w.AppointmentStatus != "CN"
                                    && !w.UnScheduleWorkOrder
                                    && w.ActiveStatus)
                        .AsNoTracking()
                        .Select(r => new DO_PatientAppointmentDetail
                        {
                            AppointmentDate = r.AppointmentDate,
                            AppointmentFromTime = r.AppointmentFromTime,
                            Duration = r.Duration,
                            StartDate = r.AppointmentDate.Date.Add(r.AppointmentFromTime),
                            EndDate = r.AppointmentDate.Date.Add(r.AppointmentFromTime).AddMinutes(r.Duration),
                        }).ToListAsync();

                    var ts = await db.GtEopaps
                        .Where(w => w.BusinessKey == businessKey && w.SpecialtyId == specialtyId
                                    && w.DoctorId == doctorId
                                    && w.AppointmentDate.Date == scheduleDate.Date
                                    && w.AppointmentStatus == "SL"
                                    && w.CreatedOn.AddMinutes(2) > System.DateTime.Now
                                    && w.ActiveStatus)
                        .AsNoTracking()
                        .Select(r => new DO_PatientAppointmentDetail
                        {
                            AppointmentDate = r.AppointmentDate,
                            AppointmentFromTime = r.AppointmentFromTime,
                            Duration = r.Duration,
                            StartDate = r.AppointmentDate.Date.Add(r.AppointmentFromTime),
                            EndDate = r.AppointmentDate.Date.Add(r.AppointmentFromTime).AddMinutes(r.Duration),
                        }).ToListAsync();

                    var l_ds = ds.Union(ts);
                    return l_ds.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_ApplicationCodes>> GetApplicationCodesByCodeType(int codeType)
        {
            try
            {
                using (var db = new eSyaEnterpriseContext())
                {
                    var ds = db.GtEcapcd
                        .Where(w => w.CodeType == codeType && w.ActiveStatus)
                        .Select(r => new DO_ApplicationCodes
                        {
                            ApplicationCode = r.ApplicationCode,
                            CodeDesc = r.CodeDesc
                        }).OrderBy(o => o.CodeDesc).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
